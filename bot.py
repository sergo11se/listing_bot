import requests
import time
import os
import logging
import threading
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def home():
    return "ü§ñ Listing bot is running!"

def send_telegram_message(text):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {"chat_id": CHAT_ID, "text": text}
        response = requests.post(url, json=data)
        if response.status_code != 200:
            logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logging.error(f"Telegram Error: {e}")

def check_binance():
    logging.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance...")
    try:
        url = "https://api.binance.com/api/v3/exchangeInfo"
        response = requests.get(url)
        data = response.json()
        # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        symbols = [s["symbol"] for s in data["symbols"] if s["status"] == "TRADING"]
        return symbols
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ Binance: {e}")
        return []

def check_upbit():
    logging.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Upbit...")
    try:
        url = "https://api.upbit.com/v1/market/all"
        response = requests.get(url)
        data = response.json()
        symbols = [item["market"] for item in data if item["market"].startswith("KRW-")]
        return symbols
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ Upbit: {e}")
        return []

def check_coinbase():
    logging.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Coinbase...")
    try:
        url = "https://api.exchange.coinbase.com/products"
        headers = {"User-Agent": "ListingBot/1.0"}
        response = requests.get(url, headers=headers)
        data = response.json()
        symbols = [item["id"] for item in data]
        return symbols
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ Coinbase: {e}")
        return []

# –•—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
known = {
    "binance": set(),
    "upbit": set(),
    "coinbase": set()
}

def monitor_listings():
    global known
    while True:
        try:
            new_binance = set(check_binance())
            new_upbit = set(check_upbit())
            new_coinbase = set(check_coinbase())

            # Binance
            added_binance = new_binance - known["binance"]
            if added_binance:
                for s in added_binance:
                    send_telegram_message(f"üü¢ –ù–æ–≤—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –Ω–∞ Binance: {s}")
                known["binance"] = new_binance

            # Upbit
            added_upbit = new_upbit - known["upbit"]
            if added_upbit:
                for s in added_upbit:
                    send_telegram_message(f"üü¢ –ù–æ–≤—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –Ω–∞ Upbit: {s}")
                known["upbit"] = new_upbit

            # Coinbase
            added_coinbase = new_coinbase - known["coinbase"]
            if added_coinbase:
                for s in added_coinbase:
                    send_telegram_message(f"üü¢ –ù–æ–≤—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –Ω–∞ Coinbase: {s}")
                known["coinbase"] = new_coinbase

        except Exception as e:
            logging.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –≤ Listing Bot: {e}")

        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def start_bot():
    send_telegram_message("‚úÖ Listing Bot –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    monitor_listings()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    port = int(os.environ.get("PORT", 10000))
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=port)).start()
    # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
    start_bot()
