import time
import requests
import logging
import json
import os
from flask import Flask
from threading import Thread

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '7683066723:AAHot2507_9RrkpNCMh5QKLi0cQr7cPEVH8'
CHAT_ID = '5305138065'

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
SENT_BINANCE_FILE = 'sent_binance.json'
SENT_UPBIT_FILE = 'sent_upbit.json'
SENT_COINBASE_FILE = 'sent_coinbase.json'

# Flask ‚Äî –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

# Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_telegram_message(message):
    url = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
    payload = {'chat_id': CHAT_ID, 'text': message}
    try:
        requests.post(url, data=payload)
    except Exception as e:
        logging.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}')

def load_sent(filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return set(json.load(f))
    return set()

def save_sent(filename, sent_set):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(list(sent_set), f, ensure_ascii=False)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance
def check_binance():
    sent = load_sent(SENT_BINANCE_FILE)
    try:
        headers = {'User-Agent': 'Mozilla/5.0'}
        url = 'https://www.binance.com/bapi/composite/v1/public/cms/article/list/query?type=1&pageNo=1&pageSize=10'
        response = requests.get(url, headers=headers)

        if response.status_code != 200:
            logging.warning(f'Binance –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}')
            return

        # –í—ã–≤–µ–¥–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f'Binance raw response: {response.text[:500]}')

        data = response.json()

        new_sent = set(sent)
        for article in data.get('data', {}).get('articles', []):
            title = article.get('title', '')
            if 'will list' in title.lower() and title not in sent:
                send_telegram_message(f'üì¢ Binance Listing: {title}')
                new_sent.add(title)

        save_sent(SENT_BINANCE_FILE, new_sent)
    except Exception as e:
        logging.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ Binance: {e}')


        save_sent(SENT_BINANCE_FILE, new_sent)
    except Exception as e:
        logging.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ Binance: {e}')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Upbit
def check_upbit():
    sent = load_sent(SENT_UPBIT_FILE)
    try:
        url = 'https://api.upbit.com/v1/market/all'
        response = requests.get(url)
        data = response.json()

        # –í Upbit –ª–∏—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã –º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ –Ω–æ–≤–æ–º—É market_code
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ market_code, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ —Ä–∞–Ω–µ–µ.
        new_sent = set(sent)
        for market in data:
            market_code = market.get('market', '')
            korean_name = market.get('korean_name', '')
            if market_code not in sent and market_code.startswith('KRW-'):  # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä—ã–Ω–∫—É (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
                send_telegram_message(f'üì¢ Upbit Listing: {market_code} - {korean_name}')
                new_sent.add(market_code)

        save_sent(SENT_UPBIT_FILE, new_sent)
    except Exception as e:
        logging.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ Upbit: {e}')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Coinbase
def check_coinbase():
    sent = load_sent(SENT_COINBASE_FILE)
    try:
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º—ë–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Coinbase API —Å list coins
        url = 'https://api.coinbase.com/v2/currencies'
        response = requests.get(url)
        data = response.json()

        new_sent = set(sent)
        for coin in data.get('data', []):
            coin_id = coin.get('id', '')
            coin_name = coin.get('name', '')
            if coin_id not in sent:
                # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç–µ –Ω–∞ Coinbase (–ø—Ä–∏–º–µ—Ä)
                send_telegram_message(f'üì¢ Coinbase Currency: {coin_name} ({coin_id})')
                new_sent.add(coin_id)

        save_sent(SENT_COINBASE_FILE, new_sent)
    except Exception as e:
        logging.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ Coinbase: {e}')

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def run_bot():
    last_notify = 0
    while True:
        logging.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Binance...")
        check_binance()
        logging.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Upbit...")
        check_upbit()
        logging.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Coinbase...")
        check_coinbase()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –∫–∞–∂–¥—ã–π —á–∞—Å
        if time.time() - last_notify >= 3600:
            send_telegram_message("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ.")
            last_notify = time.time()

        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫ Flask + –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    Thread(target=run_bot).start()
    app.run(host='0.0.0.0', port=10000)
